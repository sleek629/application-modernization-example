// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: word.proto

package word

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_word_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_word_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_word_proto_rawDescGZIP(), []int{0}
}

type WordCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word  string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WordCount) Reset() {
	*x = WordCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_word_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordCount) ProtoMessage() {}

func (x *WordCount) ProtoReflect() protoreflect.Message {
	mi := &file_word_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordCount.ProtoReflect.Descriptor instead.
func (*WordCount) Descriptor() ([]byte, []int) {
	return file_word_proto_rawDescGZIP(), []int{1}
}

func (x *WordCount) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *WordCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WordCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wc []*WordCount `protobuf:"bytes,1,rep,name=wc,proto3" json:"wc,omitempty"`
}

func (x *WordCounts) Reset() {
	*x = WordCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_word_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordCounts) ProtoMessage() {}

func (x *WordCounts) ProtoReflect() protoreflect.Message {
	mi := &file_word_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordCounts.ProtoReflect.Descriptor instead.
func (*WordCounts) Descriptor() ([]byte, []int) {
	return file_word_proto_rawDescGZIP(), []int{2}
}

func (x *WordCounts) GetWc() []*WordCount {
	if x != nil {
		return x.Wc
	}
	return nil
}

type Word struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
}

func (x *Word) Reset() {
	*x = Word{}
	if protoimpl.UnsafeEnabled {
		mi := &file_word_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_word_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_word_proto_rawDescGZIP(), []int{3}
}

func (x *Word) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

var File_word_proto protoreflect.FileDescriptor

var file_word_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x02, 0x77, 0x63,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x02, 0x77, 0x63, 0x22, 0x1a, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f,
	0x72, 0x64, 0x32, 0x4b, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x64, 0x41, 0x50, 0x49, 0x12, 0x21, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0b, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x00,
	0x12, 0x1d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x05,
	0x2e, 0x57, 0x6f, 0x72, 0x64, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_word_proto_rawDescOnce sync.Once
	file_word_proto_rawDescData = file_word_proto_rawDesc
)

func file_word_proto_rawDescGZIP() []byte {
	file_word_proto_rawDescOnce.Do(func() {
		file_word_proto_rawDescData = protoimpl.X.CompressGZIP(file_word_proto_rawDescData)
	})
	return file_word_proto_rawDescData
}

var file_word_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_word_proto_goTypes = []interface{}{
	(*Empty)(nil),      // 0: Empty
	(*WordCount)(nil),  // 1: WordCount
	(*WordCounts)(nil), // 2: WordCounts
	(*Word)(nil),       // 3: Word
}
var file_word_proto_depIdxs = []int32{
	1, // 0: WordCounts.wc:type_name -> WordCount
	0, // 1: WordAPI.GetWords:input_type -> Empty
	3, // 2: WordAPI.UpdateWord:input_type -> Word
	2, // 3: WordAPI.GetWords:output_type -> WordCounts
	0, // 4: WordAPI.UpdateWord:output_type -> Empty
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_word_proto_init() }
func file_word_proto_init() {
	if File_word_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_word_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_word_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_word_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_word_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Word); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_word_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_word_proto_goTypes,
		DependencyIndexes: file_word_proto_depIdxs,
		MessageInfos:      file_word_proto_msgTypes,
	}.Build()
	File_word_proto = out.File
	file_word_proto_rawDesc = nil
	file_word_proto_goTypes = nil
	file_word_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WordAPIClient is the client API for WordAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WordAPIClient interface {
	GetWords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WordCounts, error)
	UpdateWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Empty, error)
}

type wordAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWordAPIClient(cc grpc.ClientConnInterface) WordAPIClient {
	return &wordAPIClient{cc}
}

func (c *wordAPIClient) GetWords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WordCounts, error) {
	out := new(WordCounts)
	err := c.cc.Invoke(ctx, "/WordAPI/GetWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordAPIClient) UpdateWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/WordAPI/UpdateWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordAPIServer is the server API for WordAPI service.
type WordAPIServer interface {
	GetWords(context.Context, *Empty) (*WordCounts, error)
	UpdateWord(context.Context, *Word) (*Empty, error)
}

// UnimplementedWordAPIServer can be embedded to have forward compatible implementations.
type UnimplementedWordAPIServer struct {
}

func (*UnimplementedWordAPIServer) GetWords(context.Context, *Empty) (*WordCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWords not implemented")
}
func (*UnimplementedWordAPIServer) UpdateWord(context.Context, *Word) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWord not implemented")
}

func RegisterWordAPIServer(s *grpc.Server, srv WordAPIServer) {
	s.RegisterService(&_WordAPI_serviceDesc, srv)
}

func _WordAPI_GetWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordAPIServer).GetWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WordAPI/GetWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordAPIServer).GetWords(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordAPI_UpdateWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Word)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordAPIServer).UpdateWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WordAPI/UpdateWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordAPIServer).UpdateWord(ctx, req.(*Word))
	}
	return interceptor(ctx, in, info, handler)
}

var _WordAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WordAPI",
	HandlerType: (*WordAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWords",
			Handler:    _WordAPI_GetWords_Handler,
		},
		{
			MethodName: "UpdateWord",
			Handler:    _WordAPI_UpdateWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "word.proto",
}
